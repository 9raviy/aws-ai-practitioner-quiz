name: Deploy to Development Environment

on:
  push:
    branches: [dev]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'infrastructure/**'
      - '.github/workflows/deploy-complete.yml'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev

env:
  AWS_REGION: us-east-1

jobs:
  deploy-all:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean up conflicting stacks
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          
          echo "üßπ Checking for conflicting stacks..."
          
          # Delete any failed stacks (check if exists first)
          FAILED_STACK="ai-quiz-${ENVIRONMENT}"
          if aws cloudformation describe-stacks --stack-name $FAILED_STACK >/dev/null 2>&1; then
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $FAILED_STACK --query 'Stacks[0].StackStatus' --output text)
            echo "Found stack $FAILED_STACK with status: $STACK_STATUS"
            if [[ "$STACK_STATUS" == *"ROLLBACK"* ]] || [[ "$STACK_STATUS" == *"FAILED"* ]]; then
              echo "Deleting failed stack: $FAILED_STACK (Status: $STACK_STATUS)"
              aws cloudformation delete-stack --stack-name $FAILED_STACK
              echo "Waiting for stack deletion to complete..."
              aws cloudformation wait stack-delete-complete --stack-name $FAILED_STACK
              echo "Stack $FAILED_STACK deleted successfully"
            else
              echo "Stack $FAILED_STACK exists but is in status: $STACK_STATUS (not deleting)"
            fi
          else
            echo "Stack $FAILED_STACK does not exist (this is normal for first deployment)"
          fi
          
          # Delete conflicting minimal stack if it exists
          if aws cloudformation describe-stacks --stack-name ai-quiz-minimal >/dev/null 2>&1; then
            echo "Found conflicting stack: ai-quiz-minimal, deleting..."
            aws cloudformation delete-stack --stack-name ai-quiz-minimal
            echo "Waiting for ai-quiz-minimal deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name ai-quiz-minimal
            echo "Stack ai-quiz-minimal deleted successfully"
          else
            echo "No conflicting ai-quiz-minimal stack found"
          fi
          
          echo "‚úÖ Cleanup completed"

      - name: Deploy Infrastructure
        id: deploy-infrastructure
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          STACK_NAME="ai-quiz-${ENVIRONMENT}"
          
          echo "üöÄ Deploying infrastructure for environment: $ENVIRONMENT"
          
          cd infrastructure
          aws cloudformation deploy \
            --template-file cloudformation.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides Environment=$ENVIRONMENT \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-fail-on-empty-changeset
          
          # Verify stack was created successfully
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query 'Stacks[0].StackStatus' --output text)
          echo "Stack status: $STACK_STATUS"
          
          if [[ "$STACK_STATUS" != "CREATE_COMPLETE" && "$STACK_STATUS" != "UPDATE_COMPLETE" ]]; then
            echo "‚ùå Infrastructure deployment failed with status: $STACK_STATUS"
            exit 1
          fi
          
          echo "‚úÖ Infrastructure deployed successfully"

      - name: Verify Infrastructure Outputs
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          STACK_NAME="ai-quiz-${ENVIRONMENT}"
          
          echo "üîç Verifying infrastructure outputs..."
          
          # Check that required outputs exist
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
            --output text)
          
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          
          if [[ -z "$FUNCTION_NAME" || "$FUNCTION_NAME" == "None" ]]; then
            echo "‚ùå Lambda function name not found in stack outputs"
            exit 1
          fi
          
          if [[ -z "$API_URL" || "$API_URL" == "None" ]]; then
            echo "‚ùå API URL not found in stack outputs"
            exit 1
          fi
          
          echo "‚úÖ Infrastructure outputs verified:"
          echo "  Lambda Function: $FUNCTION_NAME"
          echo "  API URL: $API_URL"

      - name: Deploy Backend
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          STACK_NAME="ai-quiz-${ENVIRONMENT}"
          
          echo "üõ†Ô∏è Deploying backend for environment: $ENVIRONMENT"
          echo "üìã This step requires infrastructure to be deployed first"
          
          # Get function name from infrastructure stack
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
            --output text)
          
          if [[ -z "$FUNCTION_NAME" || "$FUNCTION_NAME" == "None" ]]; then
            echo "‚ùå Cannot find Lambda function name from infrastructure stack"
            echo "‚ùå Infrastructure deployment may have failed"
            exit 1
          fi
          
          echo "üì¶ Installing backend dependencies..."
          cd backend
          if [ -f package-lock.json ]; then
            echo "Installing all dependencies (including dev dependencies for build)..."
            npm ci
          else
            echo "‚ö†Ô∏è package-lock.json not found, running npm install to generate it"
            npm install
          fi
          
          echo "üì¶ Building backend..."
          npm run build
          
          echo "üì¶ Creating deployment package..."
          rm -rf lambda-deploy
          mkdir lambda-deploy
          cp -r dist/* lambda-deploy/
          
          # Copy package.json and package-lock.json if it exists
          cp package.json lambda-deploy/
          if [ -f package-lock.json ]; then
            cp package-lock.json lambda-deploy/
          else
            echo "‚ö†Ô∏è package-lock.json not found, will be generated during npm install"
          fi
          
          cd lambda-deploy
          if [ -f package-lock.json ]; then
            echo "Installing production dependencies only..."
            npm ci --omit=dev
          else
            echo "‚ö†Ô∏è package-lock.json not found, running npm install for production dependencies"
            npm install --omit=dev
          fi
          zip -r ../backend-deployment.zip .
          cd ..
          
          echo "üöÄ Deploying to Lambda function: $FUNCTION_NAME"
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://backend-deployment.zip
          
          echo "‚úÖ Backend deployed successfully"

      - name: Deploy Frontend
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          STACK_NAME="ai-quiz-${ENVIRONMENT}"
          
          echo "üé® Deploying frontend for environment: $ENVIRONMENT"
          echo "üìã This step requires infrastructure and backend to be deployed first"
          
          # Get API URL from infrastructure stack
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          
          if [[ -z "$API_URL" || "$API_URL" == "None" ]]; then
            echo "‚ùå Cannot find API URL from infrastructure stack"
            echo "‚ùå Infrastructure deployment may have failed"
            exit 1
          fi
          
          # Get S3 bucket name from infrastructure stack (CloudFormation managed)
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
            --output text)
          
          if [[ -z "$BUCKET_NAME" || "$BUCKET_NAME" == "None" ]]; then
            echo "‚ùå Cannot find S3 bucket name from infrastructure stack"
            echo "‚ùå Infrastructure deployment may have failed"
            exit 1
          fi
          
          # Get CloudFront distribution domain
          CLOUDFRONT_DOMAIN=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDomainName`].OutputValue' \
            --output text)
          
          echo "üîó Using API URL: $API_URL"
          echo "ü™£ Using S3 Bucket: $BUCKET_NAME"
          echo "üåê CloudFront Domain: $CLOUDFRONT_DOMAIN"
          
          # Build frontend with environment configuration
          cd frontend
          echo "üìù Creating production environment file..."
          cat > .env.production << EOF
          VITE_API_URL=$API_URL
          VITE_ENVIRONMENT=$ENVIRONMENT
          EOF
          
          echo "üì¶ Installing frontend dependencies..."
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "‚ö†Ô∏è package-lock.json not found, running npm install to generate it"
            npm install
          fi
          
          echo "üì¶ Building frontend..."
          npm run build
          
          echo " Uploading frontend files to S3..."
          aws s3 sync dist/ s3://$BUCKET_NAME --delete
          
          # Get CloudFront distribution ID for cache invalidation
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text)
          
          if [[ -n "$DISTRIBUTION_ID" && "$DISTRIBUTION_ID" != "None" ]]; then
            echo "üîÑ Invalidating CloudFront cache..."
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
          fi
          
          WEBSITE_URL="https://$CLOUDFRONT_DOMAIN"
          
          echo "‚úÖ Deployment complete!"
          echo "üîó API URL: $API_URL"
          echo "üåê Website URL: $WEBSITE_URL"
          
          # Save deployment info for reference
          echo "WEBSITE_URL=$WEBSITE_URL" >> $GITHUB_ENV
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      - name: Deployment Summary
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          
          echo "üéâ ===== DEPLOYMENT COMPLETE ====="
          echo ""
          echo "üìã Environment: $ENVIRONMENT"
          echo "üåç AWS Region: ${{ env.AWS_REGION }}"
          echo "‚è∞ Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "üîó Application URLs:"
          echo "  ‚Ä¢ API: ${API_URL}"
          echo "  ‚Ä¢ Website: ${WEBSITE_URL}"
          echo ""
          echo "‚úÖ All components deployed successfully!"
          echo "‚úÖ Infrastructure: CloudFormation stack ai-quiz-${ENVIRONMENT}"
          echo "‚úÖ Backend: Lambda function updated"
          echo "‚úÖ Frontend: S3 bucket created and files uploaded"
          echo ""
          echo "üöÄ Your AI Practitioner Quiz application is now live!"
