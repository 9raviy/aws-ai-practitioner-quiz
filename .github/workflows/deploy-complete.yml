name: Complete Deployment Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1

jobs:
  deploy-all:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies and cache
        run: |
          # Install backend dependencies
          cd backend
          npm ci
          cd ..
          
          # Install frontend dependencies  
          cd frontend
          npm ci
          cd ..

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Infrastructure
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          STACK_NAME="ai-quiz-${ENVIRONMENT}"
          
          echo "🚀 Deploying infrastructure for environment: $ENVIRONMENT"
          
          cd infrastructure
          aws cloudformation deploy \
            --template-file cloudformation.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides Environment=$ENVIRONMENT \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-fail-on-empty-changeset

      - name: Deploy Backend
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          STACK_NAME="ai-quiz-${ENVIRONMENT}"
          
          echo "🛠️ Deploying backend for environment: $ENVIRONMENT"
          
          # Get function name
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
            --output text)
          
          # Build backend
          cd backend
          npm run build
          
          # Create deployment package
          rm -rf lambda-deploy
          mkdir lambda-deploy
          cp -r dist/* lambda-deploy/
          cp package.json package-lock.json lambda-deploy/
          cd lambda-deploy
          npm ci --only=production
          zip -r ../backend-deployment.zip .
          cd ..
          
          # Deploy to Lambda
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://backend-deployment.zip

      - name: Deploy Frontend
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }}
          STACK_NAME="ai-quiz-${ENVIRONMENT}"
          
          echo "🎨 Deploying frontend for environment: $ENVIRONMENT"
          
          # Get API URL
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          
          # Build frontend
          cd frontend
          cat > .env.production << EOF
          VITE_API_URL=$API_URL
          VITE_ENVIRONMENT=$ENVIRONMENT
          EOF
          
          npm run build
          
          # Create S3 bucket and deploy
          BUCKET_NAME="ai-quiz-frontend-${ENVIRONMENT}-$(date +%s)"
          aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }}
          aws s3 website s3://$BUCKET_NAME --index-document index.html --error-document index.html
          aws s3 sync dist/ s3://$BUCKET_NAME --delete
          
          echo "✅ Deployment complete!"
          echo "API URL: $API_URL"
          echo "Website URL: http://$BUCKET_NAME.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
