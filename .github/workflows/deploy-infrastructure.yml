name: Deploy Infrastructure

on:
  # Disabled automatic push triggers to prevent conflicts with complete deployment
  # push:
  #   branches: [main]
  #   paths:
  #     - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: false
        default: 'dev'
        type: string

env:
  AWS_REGION: us-east-1

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate CloudFormation template
        run: |
          aws cloudformation validate-template \
            --template-body file://infrastructure/cloudformation.yaml

      - name: Clean up conflicting stacks
        run: |
          ENVIRONMENT=${{ inputs.environment || github.event.inputs.environment || 'dev' }}
          
          echo "ðŸ§¹ Checking for conflicting stacks..."
          
          # Delete any failed stacks (check if exists first)
          FAILED_STACK="ai-quiz-${ENVIRONMENT}"
          if aws cloudformation describe-stacks --stack-name $FAILED_STACK >/dev/null 2>&1; then
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name $FAILED_STACK --query 'Stacks[0].StackStatus' --output text)
            echo "Found stack $FAILED_STACK with status: $STACK_STATUS"
            if [[ "$STACK_STATUS" == *"ROLLBACK"* ]] || [[ "$STACK_STATUS" == *"FAILED"* ]]; then
              echo "Deleting failed stack: $FAILED_STACK (Status: $STACK_STATUS)"
              aws cloudformation delete-stack --stack-name $FAILED_STACK
              echo "Waiting for stack deletion to complete..."
              aws cloudformation wait stack-delete-complete --stack-name $FAILED_STACK
              echo "Stack $FAILED_STACK deleted successfully"
            else
              echo "Stack $FAILED_STACK exists but is in status: $STACK_STATUS (not deleting)"
            fi
          else
            echo "Stack $FAILED_STACK does not exist (this is normal for first deployment)"
          fi
          
          # Delete conflicting minimal stack if it exists
          if aws cloudformation describe-stacks --stack-name ai-quiz-minimal >/dev/null 2>&1; then
            echo "Found conflicting stack: ai-quiz-minimal, deleting..."
            aws cloudformation delete-stack --stack-name ai-quiz-minimal
            echo "Waiting for ai-quiz-minimal deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name ai-quiz-minimal
            echo "Stack ai-quiz-minimal deleted successfully"
          else
            echo "No conflicting ai-quiz-minimal stack found"
          fi
          
          echo "âœ… Cleanup completed"

      - name: Deploy CloudFormation stack
        run: |
          ENVIRONMENT=${{ inputs.environment || github.event.inputs.environment || 'dev' }}
          STACK_NAME="ai-quiz-${ENVIRONMENT}"
          
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides Environment=$ENVIRONMENT \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }} \
            --no-fail-on-empty-changeset

      - name: Get stack outputs
        id: stack-outputs
        run: |
          ENVIRONMENT=${{ inputs.environment || github.event.inputs.environment || 'dev' }}
          STACK_NAME="ai-quiz-${ENVIRONMENT}"
          
          # Get API Gateway URL
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          
          # Get Lambda Function Name
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
            --output text)
          
          # Get DynamoDB Table Name
          TABLE_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`DynamoDBTableName`].OutputValue' \
            --output text)
          
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "function-name=$FUNCTION_NAME" >> $GITHUB_OUTPUT
          echo "table-name=$TABLE_NAME" >> $GITHUB_OUTPUT

      - name: Save deployment info
        run: |
          ENVIRONMENT=${{ inputs.environment || github.event.inputs.environment || 'dev' }}
          mkdir -p deployment-info
          cat > deployment-info/$ENVIRONMENT.json << EOF
          {
            "environment": "$ENVIRONMENT",
            "region": "${{ env.AWS_REGION }}",
            "apiUrl": "${{ steps.stack-outputs.outputs.api-url }}",
            "functionName": "${{ steps.stack-outputs.outputs.function-name }}",
            "tableName": "${{ steps.stack-outputs.outputs.table-name }}",
            "deployedAt": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF

      - name: Upload deployment info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info-${{ inputs.environment || github.event.inputs.environment || 'dev' }}
          path: deployment-info/
          retention-days: 30
