# Production Deployment Workflow with Custom Domain Support
name: Deploy to Production (QuizAxis.com)

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'infrastructure/**'
      - '.github/workflows/deploy-production.yml'
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy infrastructure changes'
        required: false
        default: false
        type: boolean
      deploy_backend:
        description: 'Deploy backend'
        required: false
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend'
        required: false
        default: true
        type: boolean
      force_deploy:
        description: 'Force deploy even without changes'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  DOMAIN_NAME: 'quizaxis.com'
  ENVIRONMENT: 'prod'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" == "true" ]; then
            echo "infrastructure=true" >> $GITHUB_OUTPUT
            echo "backend=true" >> $GITHUB_OUTPUT
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            # Check for infrastructure changes
            if git diff --name-only HEAD~1 HEAD | grep -E "(infrastructure/|\.github/workflows/)" > /dev/null; then
              echo "infrastructure=true" >> $GITHUB_OUTPUT
            else
              echo "infrastructure=false" >> $GITHUB_OUTPUT
            fi
            
            # Check for backend changes
            if git diff --name-only HEAD~1 HEAD | grep "backend/" > /dev/null; then
              echo "backend=true" >> $GITHUB_OUTPUT
            else
              echo "backend=false" >> $GITHUB_OUTPUT
            fi
            
            # Check for frontend changes
            if git diff --name-only HEAD~1 HEAD | grep "frontend/" > /dev/null; then
              echo "frontend=true" >> $GITHUB_OUTPUT
            else
              echo "frontend=false" >> $GITHUB_OUTPUT
            fi
          fi

  deploy-infrastructure:
    needs: detect-changes
    if: needs.detect-changes.outputs.infrastructure-changed == 'true' || github.event.inputs.deploy_infrastructure == 'true'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get SSL Certificate ARN
        id: ssl-cert
        run: |
          CERT_ARN=$(aws acm list-certificates --region us-east-1 --query "CertificateSummaryList[?DomainName=='${{ env.DOMAIN_NAME }}'].CertificateArn" --output text)
          if [ -z "$CERT_ARN" ]; then
            echo "❌ SSL Certificate not found for ${{ env.DOMAIN_NAME }}"
            echo "Please run the CLI setup script first: ./scripts/deploy-custom-domain.ps1"
            exit 1
          fi
          echo "certificate-arn=$CERT_ARN" >> $GITHUB_OUTPUT
          echo "✅ Found SSL Certificate: $CERT_ARN"

      - name: Get Hosted Zone ID
        id: hosted-zone
        run: |
          ZONE_ID=$(aws route53 list-hosted-zones --query "HostedZones[?Name=='${{ env.DOMAIN_NAME }}.'].Id" --output text | cut -d'/' -f3)
          if [ -z "$ZONE_ID" ]; then
            echo "❌ Hosted Zone not found for ${{ env.DOMAIN_NAME }}"
            echo "Please run the CLI setup script first: ./scripts/deploy-custom-domain.ps1"
            exit 1
          fi
          echo "hosted-zone-id=$ZONE_ID" >> $GITHUB_OUTPUT
          echo "✅ Found Hosted Zone: $ZONE_ID"

      - name: Deploy Infrastructure
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation.yaml \
            --stack-name quiz-infrastructure-prod \
            --parameter-overrides \
              Environment=${{ env.ENVIRONMENT }} \
              DomainName=${{ env.DOMAIN_NAME }} \
              UseCustomDomain=true \
              SSLCertificateArn=${{ steps.ssl-cert.outputs.certificate-arn }} \
              HostedZoneId=${{ steps.hosted-zone.outputs.hosted-zone-id }} \
              EnableAPIKey=true \
              RateLimitBurst=100 \
              RateLimitRate=50 \
            --capabilities CAPABILITY_IAM \
            --region ${{ env.AWS_REGION }}

      - name: Get Infrastructure Outputs
        id: infrastructure
        run: |
          S3_BUCKET=$(aws cloudformation describe-stacks --stack-name quiz-infrastructure-prod --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)
          CLOUDFRONT_ID=$(aws cloudformation describe-stacks --stack-name quiz-infrastructure-prod --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" --output text)
          API_GATEWAY_URL=$(aws cloudformation describe-stacks --stack-name quiz-infrastructure-prod --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayUrl'].OutputValue" --output text)
          
          echo "s3-bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
          echo "api-gateway-url=$API_GATEWAY_URL" >> $GITHUB_OUTPUT
          
          echo "✅ S3 Bucket: $S3_BUCKET"
          echo "✅ CloudFront ID: $CLOUDFRONT_ID"
          echo "✅ API Gateway URL: $API_GATEWAY_URL"

    outputs:
      s3-bucket: ${{ steps.infrastructure.outputs.s3-bucket }}
      cloudfront-id: ${{ steps.infrastructure.outputs.cloudfront-id }}
      api-gateway-url: ${{ steps.infrastructure.outputs.api-gateway-url }}

  deploy-backend:
    needs: [detect-changes, deploy-infrastructure]
    if: always() && (needs.detect-changes.outputs.backend-changed == 'true' || github.event.inputs.deploy_backend == 'true')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install and build backend
        run: |
          cd backend
          npm ci
          npm run build

      - name: Deploy backend to Lambda
        run: |
          cd backend
          zip -r ../backend-deployment.zip .
          aws lambda update-function-code \
            --function-name quiz-backend-prod \
            --zip-file fileb://../backend-deployment.zip \
            --region ${{ env.AWS_REGION }}

      - name: Test backend deployment
        run: |
          API_URL="https://api.${{ env.DOMAIN_NAME }}"
          echo "Testing backend at: $API_URL/health"
          
          # Wait for deployment to propagate
          sleep 30
          
          # Test health endpoint
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/health")
          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ Backend deployment successful"
          else
            echo "❌ Backend deployment failed - Health check returned: $RESPONSE"
            exit 1
          fi

  deploy-frontend:
    needs: [detect-changes, deploy-infrastructure, deploy-backend]
    if: always() && (needs.detect-changes.outputs.frontend-changed == 'true' || github.event.inputs.deploy_frontend == 'true')
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get infrastructure outputs
        id: infrastructure
        run: |
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ]; then
            # Use outputs from infrastructure job
            S3_BUCKET="${{ needs.deploy-infrastructure.outputs.s3-bucket }}"
            CLOUDFRONT_ID="${{ needs.deploy-infrastructure.outputs.cloudfront-id }}"
            API_URL="${{ needs.deploy-infrastructure.outputs.api-gateway-url }}"
          else
            # Get from existing stack
            S3_BUCKET=$(aws cloudformation describe-stacks --stack-name quiz-infrastructure-prod --query "Stacks[0].Outputs[?OutputKey=='S3BucketName'].OutputValue" --output text)
            CLOUDFRONT_ID=$(aws cloudformation describe-stacks --stack-name quiz-infrastructure-prod --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" --output text)
            
            # Get actual API Gateway URL since custom domain doesn't exist yet
            API_ID=$(aws apigateway get-rest-apis --query "items[?name=='prod-quiz-api'].id" --output text)
            API_URL="https://${API_ID}.execute-api.us-east-1.amazonaws.com/prod"
          fi
          
          echo "s3-bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT

      - name: Install and build frontend
        run: |
          cd frontend
          npm ci
          
          # Set environment variables for build
          echo "VITE_API_URL=${{ steps.infrastructure.outputs.api-url }}" > .env.production
          echo "VITE_ENVIRONMENT=production" >> .env.production
          echo "VITE_DOMAIN=${{ env.DOMAIN_NAME }}" >> .env.production
          
          npm run build

      - name: Deploy to S3
        run: |
          cd frontend
          aws s3 sync dist/ s3://${{ steps.infrastructure.outputs.s3-bucket }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "service-worker.js" \
            --exclude "manifest.json"
          
          # Upload HTML files with shorter cache
          aws s3 sync dist/ s3://${{ steps.infrastructure.outputs.s3-bucket }}/ \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "service-worker.js" \
            --include "manifest.json"

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.infrastructure.outputs.cloudfront-id }} \
            --paths "/*"

      - name: Test frontend deployment
        run: |
          echo "Testing frontend at: https://${{ env.DOMAIN_NAME }}"
          
          # Wait for CloudFront invalidation
          sleep 60
          
          # Test frontend
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.DOMAIN_NAME }}")
          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ Frontend deployment successful"
          else
            echo "❌ Frontend deployment failed - Response code: $RESPONSE"
            exit 1
          fi

  post-deployment:
    needs: [deploy-infrastructure, deploy-backend, deploy-frontend]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Post-deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Domain**: https://${{ env.DOMAIN_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**API**: https://api.${{ env.DOMAIN_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.deploy-infrastructure.result }}" == "success" ]; then
            echo "✅ Infrastructure: Deployed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-infrastructure.result }}" == "skipped" ]; then
            echo "⏭️ Infrastructure: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Infrastructure: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
            echo "✅ Backend: Deployed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-backend.result }}" == "skipped" ]; then
            echo "⏭️ Backend: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
            echo "✅ Frontend: Deployed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-frontend.result }}" == "skipped" ]; then
            echo "⏭️ Frontend: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend: Failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed. Check the logs above for details."
          echo "🔧 To troubleshoot:"
          echo "1. Check CloudFormation stack events in AWS Console"
          echo "2. Review Lambda function logs in CloudWatch"
          echo "3. Verify DNS propagation for custom domain"
