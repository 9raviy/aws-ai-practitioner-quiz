name: Deploy Backend

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: false
        default: 'dev'
        type: string

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install backend dependencies
        run: |
          cd backend
          if [ -f package-lock.json ]; then
            echo "Installing all dependencies (including dev dependencies for build)..."
            npm ci
          else
            echo "⚠️ package-lock.json not found, running npm install to generate it"
            npm install
          fi

      - name: Run backend tests
        run: |
          cd backend
          npm test || echo "No tests found, skipping..."

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Get Lambda function name from stack
        id: get-function-name
        run: |
          ENVIRONMENT=${{ inputs.environment || github.event.inputs.environment || 'dev' }}
          STACK_NAME="ai-quiz-${ENVIRONMENT}"
          
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query 'Stacks[0].Outputs[?OutputKey==`LambdaFunctionName`].OutputValue' \
            --output text)
          
          echo "function-name=$FUNCTION_NAME" >> $GITHUB_OUTPUT

      - name: Create deployment package
        run: |
          cd backend
          
          # Create clean deployment directory
          rm -rf lambda-deploy
          mkdir lambda-deploy
          
          # Copy built JavaScript files
          cp -r dist/* lambda-deploy/
          
          # Copy package.json and package-lock.json if it exists
          cp package.json lambda-deploy/
          if [ -f package-lock.json ]; then
            cp package-lock.json lambda-deploy/
          fi
          
          cd lambda-deploy
          if [ -f package-lock.json ]; then
            echo "Installing production dependencies only..."
            npm ci --omit=dev
          else
            echo "⚠️ package-lock.json not found, running npm install for production dependencies"
            npm install --omit=dev
          fi
          
          # Create ZIP file
          zip -r ../backend-deployment.zip .

      - name: Deploy to Lambda
        run: |
          cd backend
          
          aws lambda update-function-code \
            --function-name ${{ steps.get-function-name.outputs.function-name }} \
            --zip-file fileb://backend-deployment.zip \
            --region ${{ env.AWS_REGION }}

      - name: Update Lambda environment variables
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ steps.get-function-name.outputs.function-name }} \
            --environment Variables="{
              NODE_ENV=production,
              DYNAMODB_TABLE_NAME=${{ secrets.DYNAMODB_TABLE_NAME }},
              BEDROCK_REGION=${{ env.AWS_REGION }}
            }" \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment to complete
        run: |
          aws lambda wait function-updated \
            --function-name ${{ steps.get-function-name.outputs.function-name }} \
            --region ${{ env.AWS_REGION }}

      - name: Test Lambda function
        run: |
          aws lambda invoke \
            --function-name ${{ steps.get-function-name.outputs.function-name }} \
            --payload '{"httpMethod":"GET","path":"/api/v1/health","headers":{"Content-Type":"application/json"}}' \
            --region ${{ env.AWS_REGION }} \
            test-response.json
          
          cat test-response.json
          
          # Check if response contains success indicator
          if grep -q '"statusCode":200' test-response.json; then
            echo "✅ Lambda function deployed successfully!"
          else
            echo "❌ Lambda function test failed"
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: lambda-test-results-${{ inputs.environment || github.event.inputs.environment || 'dev' }}
          path: backend/test-response.json
          retention-days: 7
