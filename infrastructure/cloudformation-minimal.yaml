AWSTemplateFormatVersion: '2010-09-09'
Description: 'Minimal AWS Infrastructure for AI Practitioner Quiz Application'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  BedrockRegion:
    Type: String
    Default: 'us-west-2'
    Description: 'AWS region for Bedrock service'

Resources:
  # DynamoDB Table for Quiz Sessions
  QuizSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-quiz-sessions'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'ai-practitioner-quiz'

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-quiz-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt QuizSessionsTable.Arn
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: !Sub 'arn:aws:bedrock:${BedrockRegion}::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0'

  # Lambda Function for Main API
  QuizAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-quiz-api'
      Runtime: nodejs20.x
      Handler: index.apiHandler
      Code:
        ZipFile: |
          exports.apiHandler = async (event) => {
            return {
              statusCode: 200,
              headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS'
              },
              body: JSON.stringify({ 
                message: 'AI Quiz API is working!',
                timestamp: new Date().toISOString()
              })
            };
          };
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          DYNAMODB_TABLE_NAME: !Ref QuizSessionsTable
          BEDROCK_REGION: !Ref BedrockRegion
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'ai-practitioner-quiz'

Outputs:
  DynamoDBTableName:
    Description: 'DynamoDB Table Name'
    Value: !Ref QuizSessionsTable
    Export:
      Name: !Sub '${Environment}-quiz-sessions-table'

  LambdaFunctionName:
    Description: 'Main Lambda Function Name'
    Value: !Ref QuizAPIFunction
    Export:
      Name: !Sub '${Environment}-quiz-lambda-function'

  LambdaFunctionArn:
    Description: 'Main Lambda Function ARN'
    Value: !GetAtt QuizAPIFunction.Arn
    Export:
      Name: !Sub '${Environment}-quiz-lambda-function-arn'
