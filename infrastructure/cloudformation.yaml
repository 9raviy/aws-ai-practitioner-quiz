AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Infrastructure for AI Practitioner Quiz Application'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  BedrockRegion:
    Type: String
    Default: 'us-west-2'
    Description: 'AWS region for Bedrock service'

  DomainName:
    Type: String
    Default: 'quizaxis.com'
    Description: 'Custom domain name for the application'

  UseCustomDomain:
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    Description: 'Whether to use custom domain name'

  SSLCertificateArn:
    Type: String
    Default: ''
    Description: 'ARN of SSL certificate (required if UseCustomDomain is true)'

  HostedZoneId:
    Type: String
    Default: ''
    Description: 'Route 53 Hosted Zone ID (required if UseCustomDomain is true)'

  EnableAPIKey:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Whether to enable API key authentication'

  RateLimitBurst:
    Type: Number
    Default: 100
    Description: 'API Gateway burst limit'

  RateLimitRate:
    Type: Number
    Default: 50
    Description: 'API Gateway rate limit (requests per second)'

Conditions:
  UseCustomDomainCondition: !Equals [!Ref UseCustomDomain, 'true']
  EnableAPIKeyCondition: !Equals [!Ref EnableAPIKey, 'true']

Resources:
  # DynamoDB Table for Quiz Sessions
  QuizSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-quiz-sessions'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'ai-practitioner-quiz'

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-quiz-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !GetAtt QuizSessionsTable.Arn
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: !Sub 'arn:aws:bedrock:${BedrockRegion}::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0'

  # Lambda Function for Main API
  QuizAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-quiz-api'
      Runtime: nodejs20.x
      Handler: index.apiHandler
      Code:
        ZipFile: |
          exports.apiHandler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ message: 'Placeholder - will be updated during deployment' })
            };
          };
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          DYNAMODB_TABLE_NAME: !Ref QuizSessionsTable
          BEDROCK_REGION: !Ref BedrockRegion
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'ai-practitioner-quiz'

  # Lambda Function for Health Check
  HealthCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-quiz-health'
      Runtime: nodejs20.x
      Handler: index.healthHandler
      Code:
        ZipFile: |
          exports.healthHandler = async (event) => {
            return {
              statusCode: 200,
              body: JSON.stringify({ 
                status: 'healthy',
                timestamp: new Date().toISOString()
              })
            };
          };
      Environment:
        Variables:
          NODE_ENV: !Ref Environment
          DYNAMODB_TABLE_NAME: !Ref QuizSessionsTable
          BEDROCK_REGION: !Ref BedrockRegion
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      MemorySize: 256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'ai-practitioner-quiz'

  # API Gateway Rest API
  QuizAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${Environment}-quiz-api'
      Description: 'API for AWS AI Practitioner Quiz Application'
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - '*/*'

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProxyMethodANY
      - HealthMethodGET
    Properties:
      RestApiId: !Ref QuizAPI
      Description: !Sub '${Environment} deployment'

  # API Gateway Stage
  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref Environment
      RestApiId: !Ref QuizAPI
      DeploymentId: !Ref APIDeployment
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          DataTraceEnabled: false
          MetricsEnabled: true
          ThrottlingRateLimit: !Ref RateLimitRate
          ThrottlingBurstLimit: !Ref RateLimitBurst
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'ai-practitioner-quiz'

  # API Gateway Resource for Health Check
  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref QuizAPI
      ParentId: !GetAtt QuizAPI.RootResourceId
      PathPart: health

  # API Gateway Method for Health Check
  HealthMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizAPI
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthCheckFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false

  # API Gateway Resource for Proxy (catch-all)
  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref QuizAPI
      ParentId: !GetAtt QuizAPI.RootResourceId
      PathPart: '{proxy+}'

  # API Gateway Method for Proxy
  ProxyMethodANY:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizAPI
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuizAPIFunction.Arn}/invocations'
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy

  # CORS for API Gateway - Let Lambda handle OPTIONS requests
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref QuizAPI
      ResourceId: !Ref ProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuizAPIFunction.Arn}/invocations'

  # Lambda Permissions for API Gateway
  APILambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref QuizAPIFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuizAPI}/*/*'

  HealthLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HealthCheckFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${QuizAPI}/*/GET/health'

  # API Gateway Usage Plan for Rate Limiting
  APIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: APIStage
    Properties:
      UsagePlanName: !Sub '${Environment}-quiz-api-usage-plan'
      Description: 'Usage plan for Quiz API with rate limiting'
      ApiStages:
        - ApiId: !Ref QuizAPI
          Stage: !Ref APIStage
      Throttle:
        RateLimit: !Ref RateLimitRate
        BurstLimit: !Ref RateLimitBurst
      Quota:
        Limit: 10000
        Period: DAY

  # API Key for secured access
  APIKey:
    Type: AWS::ApiGateway::ApiKey
    Condition: EnableAPIKeyCondition
    Properties:
      Name: !Sub '${Environment}-quiz-api-key'
      Description: 'API key for Quiz application'
      Enabled: true

  # Usage Plan Key to associate API Key with Usage Plan
  APIUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Condition: EnableAPIKeyCondition
    DependsOn: APIUsagePlan
    Properties:
      KeyId: !Ref APIKey
      KeyType: API_KEY
      UsagePlanId: !Ref APIUsagePlan

  # WAF Web ACL for additional security
  APIWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${Environment}-quiz-api-waf'
      Description: 'WAF for Quiz API Gateway'
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${Environment}-quiz-api-waf'
      Rules:
        # Rate limiting rule
        - Name: RateLimitRule
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 2000
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${Environment}-quiz-rate-limit'
        
        # Geographic restriction (optional - restrict to specific countries)
        - Name: GeoBlockRule
          Priority: 2
          Statement:
            GeoMatchStatement:
              CountryCodes:
                - CN  # Block China
                - RU  # Block Russia
                - KP  # Block North Korea
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${Environment}-quiz-geo-block'

        # Known bad IPs rule
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${Environment}-quiz-bad-inputs'

      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'ai-practitioner-quiz'

  # Associate WAF with API Gateway
  APIWebACLAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn:
      - APIWebACL
      - APIStage
    Properties:
      ResourceArn: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${QuizAPI}/stages/${APIStage}'
      WebACLArn: !GetAtt APIWebACL.Arn

  # CloudFront WAF Web ACL
  CloudFrontWebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub '${Environment}-quiz-cloudfront-waf'
      Description: 'WAF for Quiz CloudFront Distribution'
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${Environment}-quiz-cloudfront-waf'
      Rules:
        # Rate limiting rule for CloudFront
        - Name: CloudFrontRateLimitRule
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 1000
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${Environment}-quiz-cf-rate-limit'

        # AWS Managed Rules - Common Rule Set
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: !Sub '${Environment}-quiz-cf-common-rules'

      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'ai-practitioner-quiz'

  # Route 53 Records for main domain
  MainDomainRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: UseCustomDomainCondition
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID
        EvaluateTargetHealth: false

  # Route 53 Record for www subdomain
  WWWDomainRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: UseCustomDomainCondition
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub 'www.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2  # CloudFront hosted zone ID
        EvaluateTargetHealth: false

  # S3 Bucket for Frontend
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-quiz-frontend-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'ai-practitioner-quiz'

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${Environment}-quiz-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If
          - UseCustomDomainCondition
          - - !Ref DomainName
            - !Sub 'www.${DomainName}'
          - !Ref 'AWS::NoValue'
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
          Compress: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        PriceClass: PriceClass_100
        ViewerCertificate: !If
          - UseCustomDomainCondition
          - AcmCertificateArn: !Ref SSLCertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        WebACLId: !GetAtt CloudFrontWebACL.Arn
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: 'ai-practitioner-quiz'

  # Bucket Policy for CloudFront
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${FrontendBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

Outputs:
  ApiUrl:
    Description: 'API Gateway Endpoint URL'
    Value: !If
      - UseCustomDomainCondition
      - !Sub 'https://api.${DomainName}'
      - !Sub 'https://${QuizAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${Environment}-quiz-api-endpoint'

  APIEndpoint:
    Description: 'API Gateway Endpoint URL (alias)'
    Value: !If
      - UseCustomDomainCondition
      - !Sub 'https://api.${DomainName}'
      - !Sub 'https://${QuizAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${Environment}-quiz-api-endpoint-alias'

  HealthEndpoint:
    Description: 'Health Check Endpoint URL'
    Value: !If
      - UseCustomDomainCondition
      - !Sub 'https://api.${DomainName}/health'
      - !Sub 'https://${QuizAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/health'
    Export:
      Name: !Sub '${Environment}-quiz-health-endpoint'

  APIKey:
    Description: 'API Key for secured access'
    Value: !If [EnableAPIKeyCondition, !Ref APIKey, 'Not enabled']
    Export:
      Name: !Sub '${Environment}-quiz-api-key'

  CustomDomainName:
    Description: 'Custom domain name'
    Value: !If [UseCustomDomainCondition, !Ref DomainName, 'Not configured']
    Export:
      Name: !Sub '${Environment}-quiz-domain-name'

  DynamoDBTableName:
    Description: 'DynamoDB Table Name'
    Value: !Ref QuizSessionsTable
    Export:
      Name: !Sub '${Environment}-quiz-sessions-table'

  LambdaFunctionName:
    Description: 'Main Lambda Function Name'
    Value: !Ref QuizAPIFunction
    Export:
      Name: !Sub '${Environment}-quiz-lambda-function'

  S3BucketName:
    Description: 'Frontend S3 Bucket Name'
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${Environment}-quiz-frontend-bucket'

  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${Environment}-quiz-cloudfront-distribution'

  CloudFrontDomainName:
    Description: 'CloudFront Distribution Domain Name'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${Environment}-quiz-cloudfront-domain'

  WebsiteUrl:
    Description: 'Frontend Website URL'
    Value: !If
      - UseCustomDomainCondition
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${Environment}-quiz-website-url'
